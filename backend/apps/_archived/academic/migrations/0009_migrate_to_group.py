# Generated by Django 4.1.7 on 2023-02-21 20:22
# flake8: noqa

from django.db import migrations
from django.utils.text import slugify
import datetime

def forwards(apps, schema_editor):
    Course = apps.get_model('academic', 'Course')
    GroupType = apps.get_model('group', 'GroupType')
    Group = apps.get_model('group', 'Group')
    Label = apps.get_model('group', 'Label')
    Subscription = apps.get_model('notification', 'Subscription')
    Event = apps.get_model('event', 'Event')
    Post = apps.get_model('post', 'Post')
    SocialLink = apps.get_model('sociallink', 'SocialLink')

    gt = GroupType.objects.create(
        name="Formations",
        slug='academic',
        sort_fields='parent__name,-label__priority,label__name,-priority,short_name',
        category_expr='group.parent.name if group.parent else ""',
        sub_category_expr='group.label',
        can_create=True)
    
    TYPE = [
        ('ING', 'Ingénieur Généraliste'),
        ('ITII', 'Ingénieur de Spécialité (ITII)'),
        ('Master', 'Master'),
        ('BBA', 'Bachelor'),
    ]
    parent = {}
    for key, name in TYPE:
        slug = slugify(name)[:40]
        if Group.objects.filter(slug=slug).exists():
            id = 1
            while Group.objects.filter(slug=f'{slug}-{id}').exists(): id += 1
            slug = f'{slug}-{id}'
        parent[key] = Group.objects.create(
            name=name,
            short_name=name,
            slug=slug,
            group_type=gt,
            children_label="Filières",
            lock_memberships=True)
        gt.extra_parents.add(parent[key])
    parent['OD'] = parent['ING']
    parent['OP'] = parent['ING']

    labels = {
        'OP': Label.objects.create(name="Option Professionnelle", group_type=gt),
        'OD': Label.objects.create(name="Option Disciplinaire", group_type=gt),
    }
    
    for c in Course.objects.all():
        slug = slugify(c.name)[:40]
        if Group.objects.filter(slug=slug).exists():
            id = 1
            while Group.objects.filter(slug=f'{slug}-{id}').exists(): id += 1
            slug = f'{slug}-{id}'
        g = Group.objects.create(
            name=c.name,
            short_name=c.name,
            slug=slug,
            parent=parent[c.type],
            group_type=gt,
            summary=c.summary if c.summary else '',
            description=c.description,
            icon=c.logo,
            banner=c.banniere,
            video1=c.video1,
            video2=c.video2,
            label=labels.get(c.type, None),
            archived=c.archived
        )
        for m in c.namedmembershipcourse_set.all():
            g.members.add(m.student, through_defaults={
                'admin': m.admin,
                'begin_date': datetime.date(m.year, 9, 1),
                'end_date': datetime.date(m.year + 1, 8, 31)
            })
        for s in Subscription.objects.filter(page=f"academic--{c.slug}"):
            g.subscribers.add(s.student)
            s.delete()
        for e in Event.objects.filter(group_slug=f"academic--{c.slug}"):
            e.group_slug=g.slug
            e.save()
        for p in Post.objects.filter(group_slug=f"academic--{c.slug}"):
            p.group_slug=g.slug
            p.save()
        for s in SocialLink.objects.filter(slug=f"academic--{c.slug}"):
            g.social_links.add(s)
    # delete all courses
    Course.objects.all().delete()


def reverse(apps, schema_editor):
    Course = apps.get_model('academic', 'Course')
    GroupType = apps.get_model('group', 'GroupType')
    Group = apps.get_model('group', 'Group')
    Subscription = apps.get_model('notification', 'Subscription')
    Event = apps.get_model('event', 'Event')
    Post = apps.get_model('post', 'Post')

    TYPE = {
        'Option Professionnelle': 'OP',
        'Option Disciplinaire': 'OD',
        'Ingénieur Généraliste': 'ING',
        'Ingénieur de Spécialité (ITII)': 'ITII',
        'Master': 'Master',
        'Bachelor': 'BBA',
    }
    for group in Group.objects.filter(group_type__slug='academic', parent__isnull=False):
        key_type = TYPE[group.parent.name]
        c = Course.objects.create(
            name=group.name,
            alt_name=group.short_name,
            type=key_type if key_type != 'ING' else TYPE[group.label.name],
            summary=group.summary,
            description=group.description,
            logo=group.icon,
            banniere=group.banner,
            video1=group.video1,
            video2=group.video2,
            slug=group.slug,
            archived=group.archived
        )
        for m in group.membership_set.all():
            c.members.add(m.student, through_defaults={
                'admin': m.admin,
                'year': m.begin_date.year
            })
        for student in group.subscribers.all():
            Subscription.objects.create(student=student, page=f"academic--{c.slug}")
        for e in Event.objects.filter(group_slug=group.slug):
            e.group_slug=f"academic--{c.slug}"
            e.save()
        for p in Post.objects.filter(group_slug=group.slug):
            p.group_slug=f"academic--{c.slug}"
            p.save()
        for s in group.social_links.all():
            s.slug = f"academic--{c.slug}"
            s.save()
    # delete all group objects
    GroupType.objects.filter(slug='academic').delete()


class Migration(migrations.Migration):

    dependencies = [
        ('academic', '0008_alter_namedmembershipcourse_year'),
        ('club', '0002_migrate_to_group'),
        ('group', '0010_group_grouptype_tag_membership_label_and_more'),
        ('notification', '0003_alter_notification_publicity'),
        ('event', '0011_rename_baseevent_event'),
        ('post', '0005_rename_group_post_group_slug'),
        ('sociallink', '0005_alter_sociallink_label_alter_sociallink_url')
    ]

    operations = [
        migrations.RunPython(forwards, reverse),
    ]
