# Generated by Django 4.2.20 on 2025-04-15 20:26

from django.db import migrations
from django.utils import timezone


def transfert_roommates_to_group(apps, schema_editor):
    # Get the models
    GroupType = apps.get_model("group", "GroupType")
    Group = apps.get_model("group", "Group")
    Roommates = apps.get_model("roommates", "Roommates")
    Membership = apps.get_model("group", "Membership")

    # Create group type
    roommates_group_type = GroupType.objects.create(
        name="Colocations",
        slug="colocs",
        hide_no_active_members=True,
        can_create=True,
        can_have_parent=False,
    )

    # Transfer roommates to group
    for roommate in Roommates.objects.all():
        housing = roommate.housing
        name = f"{roommate.name} ({roommate.begin_date.year})"
        while Group.objects.filter(name=name).exists():
            name += " bis"
        group = Group(
            name=name,
            short_name=roommate.alt_name if roommate.alt_name else roommate.name,
            group_type=roommates_group_type,
            lock_memberships=True,
            creation_year=roommate.begin_date.year,
            archived=roommate.begin_date.year<timezone.now().year,
            summary=housing.details,
            description="\n".join(summary for summary in (roommate.summary, roommate.description) if summary),
            icon=roommate.logo,
            banner=roommate.banniere,
            video1=roommate.video1,
            video2=roommate.video2,
            address=housing.address,
            latitude=str(housing.latitude),
            longitude=str(housing.longitude),
            created_at=roommate.begin_date,
            updated_at=roommate.modified_date,
        )
        group.set_slug(roommate.slug if roommate.slug else (roommate.alt_name if roommate.alt_name else roommate.name))
        group.save()

        # Transfer members
        for member in roommate.namedmembershiproommates_set.all():
            membership = Membership.objects.create(
                group=group,
                student=member.student,
                begin_date=roommate.begin_date,
                end_date=roommate.end_date,
                admin=member.admin,
                summary=member.nickname,
            )
            membership.save()

        # Delete the old roommate
        roommate.delete()

def reverse(apps, schema_editor):
    # Get the models
    Group = apps.get_model("group", "Group")
    GroupType = apps.get_model("group", "GroupType")
    Roommates = apps.get_model("roommates", "Roommates")
    Membership = apps.get_model("group", "Membership")
    NamedMembershipRoommates = apps.get_model("roommates", "NamedMembershipRoommates")
    Housing = apps.get_model("roommates", "Housing")

    # Get the group type
    roommates_group_type = GroupType.objects.get(slug="colocs")

    # Transfer groups back to roommates
    for group in Group.objects.filter(group_type=roommates_group_type):
        try:
            begin_date = group.memberships.first().begin_date
            end_date = group.memberships.first().end_date
        except Membership.DoesNotExist:
            continue  # Delete the group if it has no members

        housing = Housing.objects.create(
            address=group.address,
            latitude=float(group.latitude),
            longitude=float(group.longitude),
            details = group.summary,
        )
        roommate = Roommates.objects.create(
            # Abstract Group
            alt_name=group.short_name,
            logo=group.icon,
            banniere=group.banner,
            summary=group.summary,
            description=group.description,
            video1=group.video1,
            video2=group.video2,
            modified_date=group.updated_at,

            # Roommates
            name=" (".join(group.name.split(" (")[:-1]),  # Remove the date that was added
            begin_date=begin_date,
            end_date=end_date,
            housing=housing,
        )
        roommate.set_slug(group.slug)
        roommate.save()
        # Members
        for member in group.memberships.all():
            NamedMembershipRoommates.objects.create(
                # NamedMembership
                admin=member.admin,
                student=member.student,

                # NamedMembershipRoommates
                group=roommate,
                nickname=member.summary,
            )

        # Delete the group
        group.delete()

class Migration(migrations.Migration):

    dependencies = [
        ("group", "0018_alter_group_address_alter_group_latitude_and_more"),
        ("roommates", "0017_alter_housing_details_and_more"),
    ]

    operations = [
        migrations.RunPython(transfert_roommates_to_group, reverse),
    ]
