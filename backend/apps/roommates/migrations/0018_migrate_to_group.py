# Generated by Django 4.2.20 on 2025-04-15 20:26

from django.db import migrations
from django.utils import timezone

from apps.utils.slug import SlugModel


def transfert_roommates_to_group(apps, schema_editor):
    # Get the models
    GroupType = apps.get_model("group", "GroupType")
    Group = apps.get_model("group", "Group")
    Membership = apps.get_model("group", "Membership")
    Housing = apps.get_model("roommates", "Housing")

    # Create group type
    roommates_group_type = GroupType.objects.create(
        name="Colocations",
        slug="colocs",
        hide_no_active_members=False,
        is_map=True,
        can_create=True,
        can_have_parent=False,
    )

    # Transfer roommates to group
    for housing in Housing.objects.all():
        roommates = housing.roommates_set.order_by("begin_date")
        # add last roomate as a group
        roommate = roommates.last()
        if roommate:
            name = roommate.name
            i = 0
            while Group.objects.filter(name=name).exists():
                i += 1
                name = roommate.name + " " + str(i)
            group = Group(
                name=name,
                short_name=roommate.alt_name
                if roommate.alt_name
                else roommate.name,
                group_type=roommates_group_type,
                lock_memberships=True,
                creation_year=roommate.begin_date.year,
                archived=roommate.begin_date.year < timezone.now().year,
                summary=housing.details,
                description="\n".join(
                    summary
                    for summary in (roommate.summary, roommate.description)
                    if summary
                ),
                icon=roommate.logo,
                banner=roommate.banniere,
                video1=roommate.video1,
                video2=roommate.video2,
                address=housing.address,
                latitude=str(housing.latitude),
                longitude=str(housing.longitude),
            )
            group.set_slug(
                roommate.slug
                if roommate.slug
                else (roommate.alt_name if roommate.alt_name else roommate.name)
            )
            group._history_date = roommate.modified_date
            group.save()

            # Update the other roommates
            for roommate in roommates:
                # Create a snapshot for each roommate
                group.versions.create(
                    history_date=roommate.begin_date,
                    history_type="+",
                    name=roommate.name,
                    summary=roommate.summary,
                    description=roommate.description,
                    icon=roommate.logo,
                    banner=roommate.banniere,
                    video1=roommate.video1,
                    video2=roommate.video2,
                    id=group.id,
                )
                # Update archived status to take the current roommate object into account
                if roommate.begin_date.year >= timezone.now().year:
                    group.archived = False
                    group.save()

                # Transfer members
                for member in roommate.namedmembershiproommates_set.all():
                    try:
                        membership = Membership.objects.get(
                            group=group, student=member.student
                        )
                    except Membership.DoesNotExist:
                        Membership.objects.create(
                            group=group,
                            student=member.student,
                            begin_date=roommate.begin_date,
                            end_date=roommate.end_date,
                            admin=member.admin,
                            description=member.nickname,
                        )
                    else:
                        membership.begin_date = min(
                            membership.begin_date, roommate.begin_date
                        )
                        membership.end_date = max(
                            membership.end_date, roommate.end_date
                        )
                        membership.admin = member.admin or membership.admin
                        membership.description = "\n".join(
                            nickname
                            for nickname in (
                                membership.description,
                                member.nickname,
                            )
                            if nickname
                        )
                        membership.save()

            # Delete the old roommate
            for roommate in roommates:
                roommate.delete()

        housing.delete()


def reverse(apps, schema_editor):
    # Get the models
    Group = apps.get_model("group", "Group")
    GroupType = apps.get_model("group", "GroupType")
    Roommates = apps.get_model("roommates", "Roommates")
    Housing = apps.get_model("roommates", "Housing")

    # Get the group type
    roommates_group_type = GroupType.objects.get(slug="colocs")

    # Transfer groups back to roommates
    for group in Group.objects.filter(group_type=roommates_group_type):
        try:
            begin_date = group.membership_set.first().begin_date
            end_date = group.membership_set.first().end_date
        except AttributeError:
            continue  # Delete the group if it has no members

        housing = Housing.objects.create(
            address=group.address,
            latitude=float(group.latitude),
            longitude=float(group.longitude),
            details=group.summary,
        )

        for version in group.versions.all():
            roommate = Roommates.objects.create(
                # Abstract Group
                alt_name=group.short_name,
                logo=version.icon,
                banniere=version.banner,
                summary=version.summary,
                description=version.description,
                video1=version.video1,
                video2=version.video2,
                modified_date=version.history_date,
                # Roommates
                name=version.name,
                # we loose the correct dates, but it's too complicated to have the correct ones
                begin_date=begin_date,
                end_date=end_date,
                housing=housing,
            )
            SlugModel.set_slug(roommate, group.slug)
            roommate.save()

            # Members
            for member in group.membership_set.all():
                roommate.namedmembershiproommates_set.create(
                    # NamedMembership
                    admin=member.admin,
                    student=member.student,
                    # NamedMembershipRoommates
                    group=roommate,
                    nickname=member.summary,
                )

        # Delete the group
        group.delete()
    # Delete the group type
    roommates_group_type.delete()


class Migration(migrations.Migration):
    dependencies = [
        ("group", "0020_group_address_group_latitude_group_longitude_and_more"),
        ("roommates", "0017_alter_housing_details_and_more"),
    ]

    operations = [
        migrations.RunPython(transfert_roommates_to_group, reverse),
    ]
