# Generated by Django 4.1.3 on 2022-12-08 16:25

import apps.group.models
import apps.utils.slug
import apps.utils.upload
from django.db import migrations, models
import django.db.models.deletion
import django_ckeditor_5.fields


class Migration(migrations.Migration):

    dependencies = [
        ('student', '0006_alter_student_faculty'),
        ('group', '0009_auto_20210831_1334'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom du groupe')),
                ('short_name', models.CharField(blank=True, max_length=20, null=True, verbose_name='Nom abrégé')),
                ('order', models.IntegerField(default=0, verbose_name='Ordre')),
                ('year', models.IntegerField(blank=True, help_text='Pour les années scolaires, indiquez seulement la première année (de septembre à décembre)', null=True, verbose_name='Année du groupe')),
                ('slug', models.SlugField(blank=True, max_length=40, unique=True)),
                ('private', models.BooleanField(default=False, help_text="Un groupe privé n'est visible que par les membres du groupe.", verbose_name='Groupe privé')),
                ('anyone_can_join', models.BooleanField(blank=True, verbose_name="N'importe qui peut devenir membre")),
                ('archived', models.BooleanField(default=False, help_text='Un groupe archivé ne peut plus avoir de nouveaux membres et est masqué des résultats.', verbose_name='Groupe archivé')),
                ('summary', models.CharField(blank=True, max_length=500, null=True, verbose_name='Résumé')),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, verbose_name='Description du groupe')),
                ('icon', models.ImageField(blank=True, help_text='Votre logo sera affiché au format 306x306 pixels.', null=True, upload_to=apps.utils.upload.PathAndRename('groups/logo'), verbose_name='Logo du groupe')),
                ('banner', models.ImageField(blank=True, help_text='Votre bannière sera affichée au format 1320x492 pixels.', null=True, upload_to=apps.utils.upload.PathAndRename('groups/banniere'), verbose_name='Bannière')),
                ('video1', models.URLField(blank=True, null=True, verbose_name='Lien vidéo 1')),
                ('video2', models.URLField(blank=True, null=True, verbose_name='Lien vidéo 2')),
                ('address', models.CharField(blank=True, max_length=250, verbose_name='Adresse')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='student.student')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='student.student')),
            ],
            options={
                'verbose_name': 'Groupe',
                'ordering': ['type', 'parent', 'order', 'name'],
            },
            bases=(models.Model, apps.utils.slug.SlugModel),
        ),
        migrations.CreateModel(
            name='GroupType',
            fields=[
                ('name', models.CharField(max_length=20, unique=True, verbose_name='Nom du type')),
                ('slug', models.SlugField(max_length=10, primary_key=True, serialize=False, verbose_name='Abréviation du type')),
                ('has_map', models.BooleanField(default=False, verbose_name='Type lié à une carte')),
                ('slug_is_name', models.BooleanField(default=True, verbose_name='Slug déduit du nom')),
                ('members_must_have_dates', models.BooleanField(default=True, verbose_name='Les membres doivent avoir des dates')),
                ('anyone_can_join', models.BooleanField(default=True, verbose_name="N'importe qui peut s'ajouter par défaut")),
                ('is_year_group', models.BooleanField(default=False, verbose_name="Les groupes n'existent que sur une année scolaire.")),
                ('group_by_field', models.CharField(max_length=30, verbose_name='Grouper en catégories selon le champ')),
                ('group_by_label', models.CharField(help_text='Utiliser la syntaxe Python pour formater le texte avec le champ (cf https://docs.python.org/3/library/stdtypes.html#str.format)', max_length=100, verbose_name='Label des catégories')),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin', models.BooleanField(default=False)),
                ('summary', models.CharField(blank=True, max_length=50, null=True, verbose_name='Résumé')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('admin_request', models.BooleanField(default=False, verbose_name='A demandé à devenir admin')),
                ('admin_request_messsage', models.TextField(blank=True, verbose_name='Raison de la demande à devenir admin')),
                ('order', models.IntegerField(default=0, verbose_name='Ordre')),
                ('begin_date', models.DateField(blank=True, default=apps.group.models.today, null=True, verbose_name='Date de début')),
                ('end_date', models.DateField(blank=True, default=apps.group.models.one_year_later, null=True, verbose_name='Date de fin')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.group')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student.student')),
            ],
            options={
                'ordering': ['group', 'order', 'student'],
                'unique_together': {('student', 'group')},
            },
        ),
        migrations.AddField(
            model_name='group',
            name='members',
            field=models.ManyToManyField(related_name='groups', through='group.Membership', to='student.student', verbose_name='Membres du groupe'),
        ),
        migrations.AddField(
            model_name='group',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='group.group'),
        ),
        migrations.AddField(
            model_name='group',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.grouptype', verbose_name='Type de groupe'),
        ),
    ]
