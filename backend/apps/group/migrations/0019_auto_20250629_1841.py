# Generated by Django 4.2.23 on 2025-06-29 16:41
from django.db import migrations

from simple_history.utils import get_history_manager_for_model

from apps.account.models import User
from apps.group import models
from apps.student.models import Student


def forwards(apps, schema_editor):
    Group = apps.get_model("group", "Group")

    historical_instances = []
    history = get_history_manager_for_model(models.Group)

    for group in Group.objects.all():
        try:
            user = User.objects.get(pk=group.created_by.user.pk)
        except (AttributeError, Student.DoesNotExist):
            user = None
        created = history.model(
            history_date=group.created_at,
            history_user=user,
            history_type="+",
            **{
                field.attname: getattr(group, field.attname)
                for field in history.model.tracked_fields
            },
        )
        historical_instances.append(created)
        if group.created_at != group.updated_at:
            try:
                user = User.objects.get(pk=group.updated_by.user.pk)
            except (AttributeError, Student.DoesNotExist):
                user = None
            updated = history.model(
                history_date=group.updated_at,
                history_user=user,
                history_type="~",
                **{
                    field.attname: getattr(group, field.attname)
                    for field in history.model.tracked_fields
                },
            )
            historical_instances.append(updated)

    return history.model.objects.bulk_create(historical_instances)


def reverse(apps, schema_editor):
    Group = apps.get_model("group", "Group")
    Student = apps.get_model("student", "Student")

    history = get_history_manager_for_model(models.Group)

    for group in Group.objects.all():
        try:
            student = Student.objects.get(pk=history.earliest().history_user.student.pk)
        except (AttributeError, Student.DoesNotExist):
            student = None
        group.created_at = history.earliest().history_date
        group.created_by = student

        try:
            student = Student.objects.get(pk=history.latest().history_user.student.pk)
        except (AttributeError, Student.DoesNotExist):
            student = None
        group.updated_at = history.latest().history_date
        group.updated_by = student
        group.save()


class Migration(migrations.Migration):

    dependencies = [
        ("group", "0018_remove_group_created_at_remove_group_created_by_and_more"),
    ]

    operations = [
        migrations.RunPython(forwards, reverse),
        migrations.RemoveField(
            model_name="group",
            name="created_at",
        ),
        migrations.RemoveField(
            model_name="group",
            name="created_by",
        ),
        migrations.RemoveField(
            model_name="group",
            name="updated_at",
        ),
        migrations.RemoveField(
            model_name="group",
            name="updated_by",
        ),
    ]
