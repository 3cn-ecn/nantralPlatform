# This is a basic workflow to help you get started with Actions

name: Deploy Server

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - master
    paths:
      - backend/**
      - deployment/**
      - frontend/**
      - .github/workflows/deploy-server.yml

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Pull latest commit
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install dependencies
        working-directory: ./backend
        run: pip install -r requirements.txt

      - name: Testing
        working-directory: ./backend
        run: python manage.py test

  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [test]
    strategy:
      matrix:
        python-version: ["3.10"]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Pull latest commit
        uses: actions/checkout@v2
      - name: Backup before deploy
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.INSTANCE_ADDRESS }}
          username: "ubuntu"
          key: ${{ secrets.SSH_KEY_DEPLOY }}
          script: |
            cd nantralPlatform
            cd deployment/scripts
            git pull
            python3 -m venv env
            source env/bin/activate
            pip install -r requirements.txt
            python3 db_backup.py
            deactivate
            rm -r env
      - name: Deploy to the VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.INSTANCE_ADDRESS }}
          username: "ubuntu"
          key: ${{ secrets.SSH_KEY_DEPLOY }}
          script: |
            cd nantralPlatform
            cd frontend && npm i && npm run start
            cd ../deployment
            git pull
            sudo cp /etc/letsencrypt/live/nantral-platform.fr/privkey.pem /home/ubuntu/nantralPlatform/deployment/certs/key.pem
            sudo cp /etc/letsencrypt/live/nantral-platform.fr/fullchain.pem /home/ubuntu/nantralPlatform/deployment/certs/cert.pem
            sudo docker-compose -f docker-compose.yml -f docker-compose.prod.yml build --no-cache nginx backend
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
