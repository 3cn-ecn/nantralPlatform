"use strict";(self.webpackChunknantralplatform_docs=self.webpackChunknantralplatform_docs||[]).push([[7923],{1177:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=n(4848),r=n(8453);const o={sidebar_position:3},i="Integration Tests",a={id:"dev/frontend/testing/integration-tests",title:"Integration Tests",description:"Integration tests allows us to test the features of the code.",source:"@site/docs/dev/frontend/testing/integration-tests.mdx",sourceDirName:"dev/frontend/testing",slug:"/dev/frontend/testing/integration-tests",permalink:"/dev/frontend/testing/integration-tests",draft:!1,unlisted:!1,editUrl:"https://github.com/3cn-ecn/nantralPlatform/tree/master/docs/docs/dev/frontend/testing/integration-tests.mdx",tags:[],version:"current",lastUpdatedBy:"Alexis Delage",lastUpdatedAt:1712699007e3,sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar",previous:{title:"Linter and Formatter",permalink:"/dev/frontend/testing/linting"},next:{title:"Dependencies (npm)",permalink:"/dev/frontend/dependencies"}},c={},d=[{value:"Philosophy",id:"philosophy",level:2},{value:"Write a test in the front end",id:"write-a-test-in-the-front-end",level:2},{value:"Run the tests",id:"run-the-tests",level:2},{value:"Update snapshots",id:"update-snapshots",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"integration-tests",children:"Integration Tests"})}),"\n",(0,s.jsx)(t.p,{children:"Integration tests allows us to test the features of the code."}),"\n",(0,s.jsx)(t.p,{children:"This is an important thing to do, to avoid regressions (if we add a new feature,\nwe should be sure that previous features still work)."}),"\n",(0,s.jsxs)(t.admonition,{type:"info",children:[(0,s.jsxs)(t.mdxAdmonitionTitle,{children:["Why ",(0,s.jsx)(t.em,{children:"Integration"})," tests?"]}),(0,s.jsx)(t.p,{children:"There are different types of tests:"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Unit tests"})," are tests that test a single function or a single class."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Integration tests"})," are tests that test the interaction between different parts of the code."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"End-to-end tests"})," are tests that test the whole application, from the front end to the back end."]}),"\n"]}),(0,s.jsx)(t.p,{children:"On Nantral Platform, we choose to focus on integration tests, because they\nare easy to implement and allow us to quickly find potential bugs or security\nissues."})]}),"\n",(0,s.jsx)(t.h2,{id:"philosophy",children:"Philosophy"}),"\n",(0,s.jsx)(t.p,{children:"A good integration test is a test that reproduces the user experience."}),"\n",(0,s.jsx)(t.p,{children:"For example, on the front end, we must have test that simulates clicks on button,\nfill-in forms, etc., and watch the result."}),"\n",(0,s.jsx)(t.h2,{id:"write-a-test-in-the-front-end",children:"Write a test in the front end"}),"\n",(0,s.jsxs)(t.p,{children:["To add a test for a page, create a ",(0,s.jsx)(t.code,{children:"*.test.tsx"})," file next to the page you want to test."]}),"\n",(0,s.jsx)(t.p,{children:"Here is an example of a test file:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="Home.page.test.tsx"',children:"import { screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { EventDTO } from '#modules/event/infra/event.dto';\nimport { PostDTO } from '#modules/post/infra/post.dto';\nimport { mockServer } from '#shared/testing/mockServer';\nimport { renderWithProviders } from '#shared/testing/renderWithProviders';\n\nimport HomePage from './Home.page';\n\ndescribe('Home page', () => {\n   it('should render correctly without data', async () => {\n      // mock the api (since the backend does not exist during tests)\n      mockEventApiCall([]);\n      mockPostApiCall({ pinned: true }, []);\n      mockPostApiCall({ pinned: false }, []);\n\n      const component = renderWithProviders(<HomePage />);\n\n      // At this point the page is still loading, so we use findBy and await\n      // to wait for the element to appear.\n      // We use findByRole to check that the element is a heading.\n      // We use expect to make the test fails if the element is not found.\n      expect(await screen.findByRole('heading', { name: 'Nantral Platform' }));\n\n      // Now that the page is loaded, we check that the \"Featured\" section\n      // (or \"A la une\" in French) is hidden, since we do not have any posts.\n      expect(\n         screen.queryByRole('heading', { name: 'Featured' }),\n      ).not.toBeInTheDocument();\n\n      // On the contrary, the Events section must be displayed\n      expect(\n         screen.queryByRole('heading', { name: 'Upcoming events' }),\n      ).toBeInTheDocument();\n      expect(screen.queryByText(/No upcoming event.../)).toBeInTheDocument();\n\n      // finally, make a screenshot\n      expect(component.asFragment()).toMatchSnapshot();\n   });\n\n   it('navigates to the event page when clicking on the \"See all\" button', async () => {\n      mockEventApiCall([]);\n      mockPostApiCall({ pinned: true }, []);\n      mockPostApiCall({ pinned: false }, []);\n\n      // create a fake event page for testing\n      const fakeEventRoute = { path: '/event', element: <p>Events</p> };\n\n      renderWithProviders(<HomePage />, [fakeEventRoute]);\n\n      // click the 'See all' button\n      const seeAllLink = screen.getByText('See all'); // NB: we use get because we are not in an expect\n      userEvent.click(seeAllLink);\n\n      // check that we are on the event page\n      expect(await screen.findByText('Events')).toBeInTheDocument();\n   });\n});\n\nfunction mockPostApiCall(\n   params: { pinned?: boolean; page?: number; page_size?: number },\n   results: PostDTO[] = [],\n) {\n   mockServer\n      .get('/api/post/post/')\n      .query({ pinned: false, page: 1, page_size: 3, ...params })\n      .reply(200, { count: results.length, results });\n}\n\nfunction mockEventApiCall(results: EventDTO[] = []) {\n   mockServer\n      .get('/api/event/event/')\n      .query({ from_date: /.*/, page: 1, page_size: /.*/ })\n      .reply(200, { count: results.length, results });\n}\n\n// mock ckeditor: replaced by #shared/ckeditor/__mocks__/CustomEditor.ts\njest.mock('#shared/ckeditor/CustomEditor.ts');\n"})}),"\n",(0,s.jsxs)(t.admonition,{title:"Good practices",type:"tip",children:[(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Use the ",(0,s.jsx)(t.code,{children:"mockServer"})," to mock the API calls."]}),"\n",(0,s.jsxs)(t.li,{children:["Use ",(0,s.jsx)(t.code,{children:"renderWithProviders"})," to render the page with the providers."]}),"\n",(0,s.jsxs)(t.li,{children:["Use ",(0,s.jsx)(t.code,{children:"screen"})," to query the elements."]}),"\n",(0,s.jsxs)(t.li,{children:["Use ",(0,s.jsx)(t.code,{children:"userEvent"})," to simulate user events (click, type, etc.)."]}),"\n"]}),(0,s.jsxs)(t.p,{children:["Check the docs for more info:\n",(0,s.jsx)(t.a,{href:"https://testing-library.com/docs/react-testing-library/example-intro",children:"Testing Library QuickStart"}),",\n",(0,s.jsx)(t.a,{href:"https://testing-library.com/docs/react-testing-library/cheatsheet",children:"Testing Library Cheatsheet"}),"\nand ",(0,s.jsx)(t.a,{href:"https://testing-library.com/docs/ecosystem-user-event/",children:"user-event"}),"."]})]}),"\n",(0,s.jsx)(t.h2,{id:"run-the-tests",children:"Run the tests"}),"\n",(0,s.jsx)(t.p,{children:"You can run the tests of the whole front end with this command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm run jest\n"})}),"\n",(0,s.jsx)(t.p,{children:"You can also run the tests for a specific file:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm run jest <path>\n"})}),"\n",(0,s.jsxs)(t.p,{children:["where ",(0,s.jsx)(t.code,{children:"<path>"})," is a regex, for example you can use ",(0,s.jsx)(t.code,{children:"npm run jest Home"})," to run\nthe file ",(0,s.jsx)(t.code,{children:"Home.page.test.tsx"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"update-snapshots",children:"Update snapshots"}),"\n",(0,s.jsx)(t.p,{children:"Snapshots are like a screenshot of the rendered component. They are useful to\ncheck that the component is rendered correctly, but they can be a bit heavy."}),"\n",(0,s.jsx)(t.p,{children:"When you make changes to the interface, you might need to update the snapshots.\nTo do so, run:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm run jest:u <path>\n"})}),"\n",(0,s.jsxs)(t.p,{children:["where ",(0,s.jsx)(t.code,{children:"<path>"})," is the path to the file you want to update."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);