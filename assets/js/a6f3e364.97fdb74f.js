"use strict";(self.webpackChunknantralplatform_docs=self.webpackChunknantralplatform_docs||[]).push([[317],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,k=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1348:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={title:"Guidelines",description:"List of contribution guidelines",published:!0,date:new Date("2022-05-07T22:56:59.475Z"),editor:"markdown",dateCreated:new Date("2021-10-14T22:39:30.630Z")},s="Guidelines",u={unversionedId:"contribute/guidelines",id:"contribute/guidelines",title:"Guidelines",description:"List of contribution guidelines",source:"@site/docs/contribute/guidelines.md",sourceDirName:"contribute",slug:"/contribute/guidelines",permalink:"/docs/contribute/guidelines",draft:!1,editUrl:"https://github.com/nantral-platform/nantralPlatform/tree/master/docs/docs/contribute/guidelines.md",tags:[],version:"current",frontMatter:{title:"Guidelines",description:"List of contribution guidelines",published:!0,date:"2022-05-07T22:56:59.475Z",editor:"markdown",dateCreated:"2021-10-14T22:39:30.630Z"},sidebar:"tutorialSidebar",previous:{title:"Debugging",permalink:"/docs/contribute/debugging"},next:{title:"Staging (or dev) server",permalink:"/docs/contribute/staging-server"}},c={},d=[{value:"Git",id:"git",level:2},{value:"Code formatting",id:"code-formatting",level:2},{value:"Python",id:"python",level:3},{value:"Django",id:"django",level:2},{value:"React",id:"react",level:2}],p={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"guidelines"},"Guidelines"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Every major open-source project has its own style guide: a set of conventions (sometimes arbitrary) about how to write code for that project. It is much easier to understand a large codebase when all the code in it has a consistent style."))),(0,o.kt)("h2",{id:"git"},"Git"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Write clear and concise commit messages describing your changes :",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"add Club model"),(0,o.kt)("li",{parentName:"ul"},"reworked News model"))),(0,o.kt)("li",{parentName:"ul"},"One feature or bug fix per branch. Always base a new branch from master. ",(0,o.kt)("strong",{parentName:"li"},"Never base a branch on another branch."))),(0,o.kt)("h2",{id:"code-formatting"},"Code formatting"),(0,o.kt)("h3",{id:"python"},"Python"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/nantral-platform/nantralPlatform/blob/master/.vscode/settings-sample.json"},"provided VSCode configuration")," to enforce a unified coding style."),(0,o.kt)("li",{parentName:"ul"},"Add docstrings to every class based view, using the ",(0,o.kt)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring"},"autoDocstring extension")," for VSCode."),(0,o.kt)("li",{parentName:"ul"},"Use the ",(0,o.kt)("inlineCode",{parentName:"li"},".get()")," method instead of simple ",(0,o.kt)("inlineCode",{parentName:"li"},"[]")," to access dictionnaries' keys. See ",(0,o.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/11041405/why-dict-getkey-instead-of-dictkey"},"this SO question")," as to why."),(0,o.kt)("li",{parentName:"ul"},"Use the following naming convention (which follows the ",(0,o.kt)("a",{parentName:"li",href:"https://peps.python.org/pep-0008/"},"PEP8")," guidelines for Python):")),(0,o.kt)("table",{class:"table table-hover"},(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null,"Type"),(0,o.kt)("th",null,"Naming Convention"),(0,o.kt)("th",null,"Examples"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"Function"),(0,o.kt)("td",null,"Use a lowercase word or words. Separate words by underscores to improve readability."),(0,o.kt)("td",null,(0,o.kt)("code",null,"function"),", ",(0,o.kt)("code",null,"my_function"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Variable"),(0,o.kt)("td",null,"Use a lowercase single letter, word, or words. Separate words with underscores to improve readability."),(0,o.kt)("td",null,(0,o.kt)("code",null,"x"),", ",(0,o.kt)("code",null,"var"),", ",(0,o.kt)("code",null,"my_variable"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Class"),(0,o.kt)("td",null,"Start each word with a capital letter. Do not separate words with underscores. This style is called camel case."),(0,o.kt)("td",null,(0,o.kt)("code",null,"Model"),", ",(0,o.kt)("code",null,"MyClass"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Method"),(0,o.kt)("td",null,"Use a lowercase word or words. Separate words with underscores to improve readability."),(0,o.kt)("td",null,(0,o.kt)("code",null,"class_method"),", ",(0,o.kt)("code",null,"method"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Constant"),(0,o.kt)("td",null,"Use an uppercase single letter, word, or words. Separate words with underscores to improve readability."),(0,o.kt)("td",null,(0,o.kt)("code",null,"CONSTANT"),", ",(0,o.kt)("code",null,"MY_CONSTANT"),", ",(0,o.kt)("code",null,"MY_LONG_CONSTANT"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Module"),(0,o.kt)("td",null,"Use a short, lowercase word or words. Separate words with underscores to improve readability."),(0,o.kt)("td",null,(0,o.kt)("code",null,"module.py"),", ",(0,o.kt)("code",null,"my_module.py"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Package"),(0,o.kt)("td",null,"Use a short, lowercase word or words. Do not separate words with underscores."),(0,o.kt)("td",null,(0,o.kt)("code",null,"package"),", ",(0,o.kt)("code",null,"mypackage"))))),(0,o.kt)("h2",{id:"django"},"Django"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Keep Django applications as small as possible."),(0,o.kt)("li",{parentName:"ul"},"Every new feature has to be implemented in a new Django application. Fo instance, the club application should only be used to manage clubs. Furthermore, the news application, even though it's being used by clubs, should not be a function of clubs but a standalone app. This ensures atomicity and easy unittesting."),(0,o.kt)("li",{parentName:"ul"},"When developping localy, do use a virtual environment."),(0,o.kt)("li",{parentName:"ul"},"Write (at least) one unittest per Django view."),(0,o.kt)("li",{parentName:"ul"},"Make sure to also test incorrect data inputs. For exemple you can test that no club manager can publish on another club's page.")),(0,o.kt)("h2",{id:"react"},"React"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use TypeScript to its maximum. Every API call should expect a specific JSON format, and therefore a JavaScript object with a clear interface. Use ",(0,o.kt)("a",{parentName:"li",href:"https://quicktype.io/typescript"},"this website")," to convert JSON to a TypeScript interface."),(0,o.kt)("li",{parentName:"ul"},"While React supports class based components, the future of React is functional, thus use functions as much as possible."),(0,o.kt)("li",{parentName:"ul"},"Split components as much as possible."),(0,o.kt)("li",{parentName:"ul"},"Keep one component per module. Use ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/nantral-platform/nantralPlatform/blob/master/frontend/src/containers/clubsList.tsx"},"clubsList")," for reference."),(0,o.kt)("li",{parentName:"ul"},"Only use axios when dealing with PUT, POST and DELETE. Use fetch otherwise (this results in smaller bundle sizes)."),(0,o.kt)("li",{parentName:"ul"},"Only use one UI framework at a time to reduce bundle size.")))}m.isMDXComponent=!0}}]);