"use strict";(self.webpackChunknantralplatform_docs=self.webpackChunknantralplatform_docs||[]).push([[9119],{7223:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var s=t(5893),i=t(1151);const r={sidebar_position:2},o="Linting and Formatting",a={id:"dev/guides/tests/linting",title:"Linting and Formatting",description:"Enforces a consistent coding style across the project, and catches bugs before",source:"@site/docs/dev/guides/tests/linting.md",sourceDirName:"dev/guides/tests",slug:"/dev/guides/tests/linting",permalink:"/dev/guides/tests/linting",draft:!1,unlisted:!1,editUrl:"https://github.com/3cn-ecn/nantralPlatform/tree/master/docs/docs/dev/guides/tests/linting.md",tags:[],version:"current",lastUpdatedBy:"Alexis Delage",lastUpdatedAt:1697061281,formattedLastUpdatedAt:"Oct 11, 2023",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar",previous:{title:"Types",permalink:"/dev/guides/tests/types"},next:{title:"Integration Tests",permalink:"/dev/guides/tests/integration-tests"}},l={},d=[{value:"On the Back End",id:"on-the-back-end",level:2},{value:"On the Front End",id:"on-the-front-end",level:2},{value:"On the CI",id:"on-the-ci",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"linting-and-formatting",children:"Linting and Formatting"}),"\n",(0,s.jsx)(n.p,{children:"Enforces a consistent coding style across the project, and catches bugs before\nthey come."}),"\n",(0,s.jsx)(n.h2,{id:"on-the-back-end",children:"On the Back End"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Linter: ",(0,s.jsx)(n.a,{href:"https://flake8.pycqa.org/",children:"flake8"}),", with the ",(0,s.jsx)(n.a,{href:"https://wemake-python-styleguide.readthedocs.io/en/latest/pages/usage/violations/index.html",children:"wemake-python style-guide"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pipenv run lint\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Formatter: ",(0,s.jsx)(n.a,{href:"https://black.readthedocs.io/",children:"black"})," (for coding style)\nand ",(0,s.jsx)(n.a,{href:"https://pycqa.github.io/isort/",children:"isort"})," (for imports)","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pipenv run lint:fix\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"You can find the configuration of these tools in these 2 files (unfortunately\nwe have to duplicate the config for the moment):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".flake8"})," for the VScode extension of Flake8;"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pyproject.toml"})," for the ",(0,s.jsx)(n.code,{children:"pipenv run lint"})," command."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://wemake-python-styleguide.readthedocs.io/en/latest/pages/usage/violations/index.html",children:"See the list of all rules here"})}),"\n",(0,s.jsx)(n.h2,{id:"on-the-front-end",children:"On the Front End"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Linter: we use ",(0,s.jsx)(n.a,{href:"https://eslint.org/",children:"eslint"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run lint\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Formatter: also ",(0,s.jsx)(n.a,{href:"https://eslint.org/",children:"eslint"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run lint:fix\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"on-the-ci",children:"On the CI"}),"\n",(0,s.jsxs)(n.p,{children:["Did you noticed, that, on the back end, ",(0,s.jsx)(n.code,{children:"pipenv run flake8"})," always returns a lot\nof errors? That's because the legacy code, that was written before we adopted\nthe linter."]}),"\n",(0,s.jsxs)(n.p,{children:["As a consequence, to make the tests pass in the CI, we use ",(0,s.jsx)(n.code,{children:"flakeheaven"})," as a\nwrapper of ",(0,s.jsx)(n.code,{children:"flake8"}),". It allows us to save legacy errors in a\n",(0,s.jsx)(n.code,{children:".flakeheaven_baseline"})," file, and check only new errors."]}),"\n",(0,s.jsxs)(n.p,{children:["However, this result in a duplicated config file, because ",(0,s.jsx)(n.code,{children:"flakeaven"})," does not\nsupport ",(0,s.jsx)(n.code,{children:".flake8"})," but only ",(0,s.jsx)(n.code,{children:"pyproject.toml"})," file. In the future, the goal\nis that all python tools use ",(0,s.jsx)(n.code,{children:"pyproject.toml"})," as a config file, but ",(0,s.jsx)(n.code,{children:"flake8"}),"\ndoes not support it yet..."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var s=t(7294);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);