"use strict";(self.webpackChunknantralplatform_docs=self.webpackChunknantralplatform_docs||[]).push([[8036],{9716:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var i=n(5893),s=n(1151);const r={last_update:{date:"2023-02-18 19:28:38 +0100",author:"Alexis Delage"},sidebar_position:5,description:"How to share data between the front and the back end"},a="Rest API",o={id:"dev/guides/frameworks/rest-api",title:"Rest API",description:"How to share data between the front and the back end",source:"@site/docs/dev/guides/frameworks/rest-api.md",sourceDirName:"dev/guides/frameworks",slug:"/dev/guides/frameworks/rest-api",permalink:"/dev/guides/frameworks/rest-api",draft:!1,unlisted:!1,editUrl:"https://github.com/3cn-ecn/nantralPlatform/tree/master/docs/docs/dev/guides/frameworks/rest-api.md",tags:[],version:"current",lastUpdatedBy:"Alexis Delage",lastUpdatedAt:1676744918,formattedLastUpdatedAt:"Feb 18, 2023",sidebarPosition:5,frontMatter:{last_update:{date:"2023-02-18 19:28:38 +0100",author:"Alexis Delage"},sidebar_position:5,description:"How to share data between the front and the back end"},sidebar:"sidebar",previous:{title:"React",permalink:"/dev/guides/frameworks/react"},next:{title:"I18n",permalink:"/dev/guides/i18n"}},d={},l=[{value:"How to create an API endpoint",id:"how-to-create-an-api-endpoint",level:2},{value:"The Model",id:"the-model",level:3},{value:"The Serializer",id:"the-serializer",level:3},{value:"The ViewSet",id:"the-viewset",level:3},{value:"The urls",id:"the-urls",level:3},{value:"How to use an API endpoint",id:"how-to-use-an-api-endpoint",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"rest-api",children:"Rest API"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"https://blog.logrocket.com/creating-an-app-with-react-and-django/",children:"Quick tutorial on the Django REST Framework"})})}),"\n"]}),"\n",(0,i.jsx)("iframe",{class:"youtube",src:"https://www.youtube-nocookie.com/embed/-MTSQjw5DrM",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),"\n",(0,i.jsx)(t.h2,{id:"how-to-create-an-api-endpoint",children:"How to create an API endpoint"}),"\n",(0,i.jsx)(t.p,{children:"Let's see how to create an API endpoint with the example of events."}),"\n",(0,i.jsx)(t.h3,{id:"the-model",children:"The Model"}),"\n",(0,i.jsx)(t.p,{children:"First, create a simple model in the database with some fields. We will use here the example of events."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="models.py"',children:'from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField("Titre", max_length=50)\n    begin_date = models.DateTimeField("D\xe9but")\n    end_date = models.DateTimeField("Fin")\n    participants = models.ManyToManyField(\n        to=Student, verbose_name=\'Participants\', blank=True)\n'})}),"\n",(0,i.jsx)(t.h3,{id:"the-serializer",children:"The Serializer"}),"\n",(0,i.jsxs)(t.p,{children:["The serializer is an object which will transform the data from our database\nto JSON so that they can be sent to the front end. We can add extra fields\n(like ",(0,i.jsx)(t.code,{children:"is_participating"})," here), and add a custom validation."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="serializers.py"',children:"from rest_framework import serializers, exceptions\nfrom .models import Event\n\nclass EventSerializer(serializers.ModelSerializer):\n    is_participating = serializers.SerializerMethodField()\n\n    class Meta:\n        model = Event\n        fields = ['title', 'begin_date', 'end_date', 'is_participating']\n\n    def get_is_participating(self, obj: Event) -> bool:\n        # get the 'is_participating' field\n        student = self.context['request'].user.student\n        return obj.participants.contains(student)\n\n    def validate(self, data: dict[str, any]) -> dict[str, any]:\n        \"\"\"Check that end_date is after begin_date\"\"\"\n        if data['begin_date'] > data['end_date']:\n            # raise exception if not valid\n            raise exceptions.ValidationError(\n                \"The end date must be after the begin date.\")\n        # if valid, returns data\n        return data\n"})}),"\n",(0,i.jsxs)(t.p,{children:["For more details about Serializers, read the\n",(0,i.jsx)(t.a,{href:"https://www.django-rest-framework.org/api-guide/serializers/",children:"Django REST Framework Documentation"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"the-viewset",children:"The ViewSet"}),"\n",(0,i.jsxs)(t.p,{children:["Then, we will create a ViewSet to have all views to manipulate the serializer.\nWe add a custom ",(0,i.jsx)(t.code,{children:"Permission"})," class, which allows to manage the event only if the\nuser is a superadmin."]}),"\n",(0,i.jsx)(t.p,{children:"The ViewSet will automatically creates default views for the Events (see the\ntable below)."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="api_views.py"',children:"from rest_framework import permissions, viewsets\nfrom django.db import QuerySet\nfrom .models import Event\nfrom .serializers import EventSerializer\n\n\nclass EventPermission(permissions.BasePermission):\n\n    def has_permission(self, request, view) -> bool:\n        # permission check run for all views, optional\n        return True\n\n    def has_object_permission(self, request, view, obj: Event) -> bool:\n        # this method is only called on views that make actions on ONE object.\n        if request.method in permissions.SAFE_METHODS:\n            # if the method is a safe method (GET, HEAD, OPTIONS), i.e. it\n            # does not modify the database, then allow\n            return True\n        # else, if the method ask to modify the database (POST, PUT, PATCH, DELETE),\n        # then check that the user is an admin\n        return request.user.is_superuser\n\n\nclass EventViewSet(viewsets.ModelViewSet):\n    # check the custom permission and the default authentification permission\n    permission_classes = [permissions.IsAuthenticated, EventPermission]\n    serializer_class = EventSerializer\n\n    def get_queryset(self) -> QuerySet[Event]:\n        # which objects to get for all views (when we call a view on one object,\n        # the object is selected in this list of objects)\n        return Event.objects.all()\n"})}),"\n",(0,i.jsxs)(t.p,{children:["For more details about ViewSet, read the\n",(0,i.jsx)(t.a,{href:"https://www.django-rest-framework.org/api-guide/viewsets/",children:"Django REST Framework Documentation"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"the-urls",children:"The urls"}),"\n",(0,i.jsxs)(t.p,{children:["Finally, let's create urls to access our views (we suppose that these urls\nare in the ",(0,i.jsx)(t.code,{children:"api_urls.py"})," file of the ",(0,i.jsx)(t.code,{children:"event"})," app)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="api_urls.py"',children:"from rest_framework import routers\nfrom .api_views import EventViewSet\n\nrouter = routers.DefaultRouter()\nrouter.register('event', EventViewSet, basename='event')\nurlpatterns = router.urls\n"})}),"\n",(0,i.jsx)(t.p,{children:"So what are the available urls now?"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"HTTP Method and URL"}),(0,i.jsx)(t.th,{children:"View (or\xa0action)"}),(0,i.jsx)(t.th,{children:"Description"}),(0,i.jsx)(t.th,{children:"(1)"}),(0,i.jsx)(t.th,{children:"(2)"}),(0,i.jsx)(t.th,{children:"(3)"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:["GET ",(0,i.jsx)(t.code,{children:"/api/event/event/"})]}),(0,i.jsx)(t.td,{children:"list"}),(0,i.jsx)(t.td,{children:"Get the list of all events defined by the queryset"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{children:"\u274c"}),(0,i.jsx)(t.td,{children:"\u274c"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:["POST ",(0,i.jsx)(t.code,{children:"/api/event/event/"})]}),(0,i.jsx)(t.td,{children:"create"}),(0,i.jsx)(t.td,{children:"Create a new Event object"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{children:"\u274c"}),(0,i.jsx)(t.td,{children:"\u2705"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:["GET ",(0,i.jsx)(t.code,{children:"/api/event/event/<id>/"})]}),(0,i.jsx)(t.td,{children:"retrieve"}),(0,i.jsx)(t.td,{children:"Get the data of one event by its id"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{children:"\u274c"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:["PUT ",(0,i.jsx)(t.code,{children:"/api/event/event/<id>/"})]}),(0,i.jsx)(t.td,{children:"update"}),(0,i.jsx)(t.td,{children:"Modify the data of an event"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{children:"\u2705"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:["DELETE ",(0,i.jsx)(t.code,{children:"/api/event/event/<id>/"})]}),(0,i.jsx)(t.td,{children:"destroy"}),(0,i.jsx)(t.td,{children:"Remove the event from the database"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{children:"\u2705"}),(0,i.jsx)(t.td,{children:"\u274c"})]})]})]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["(1) Views that call the ",(0,i.jsx)(t.code,{children:"has_permission"})," method of the Permission class."]}),"\n",(0,i.jsxs)(t.li,{children:["(2) Views that call the ",(0,i.jsx)(t.code,{children:"has_object_permission"})," method of the Permission class."]}),"\n",(0,i.jsxs)(t.li,{children:["(3) Views that call the ",(0,i.jsx)(t.code,{children:"validate"})," method of the Serializer class."]}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{title:"Custom views",type:"tip",children:(0,i.jsxs)(t.p,{children:["You can also add your custom actions (or views) on a ViewSet: see the\n",(0,i.jsx)(t.a,{href:"https://www.django-rest-framework.org/api-guide/viewsets/#marking-extra-actions-for-routing",children:"Django REST Framework documentation"}),"."]})}),"\n",(0,i.jsx)(t.h2,{id:"how-to-use-an-api-endpoint",children:"How to use an API endpoint"}),"\n",(0,i.jsx)(t.p,{children:"Now, let's see how to use our new API endpoint in a React component:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:'title="MyComponent.tsx"',children:'import { useState, useEffect } from "react";\nimport { useQuery } from "react-query";\nimport axios, { AxiosError } from "axios";\n\nimport { adaptEvent } from "#modules/event/infra";\nimport { Page, PageDTO, adaptPage } from \'#shared/infra/pagination\';\n\ninterface EventDTO {\n  title: string;\n  start_date: string;\n  end_date: string;\n  is_participating: boolean;\n}\n\ninterface Event {\n  title: string;\n  startDate: Date;\n  endDate: Date;\n  isParticipating: boolean;\n}\n\nfunction MyComponent() {\n  // Create a query object. On the first time, data will be stored in the cache.\n  // Then on next queries, the data of the cache will be used while the query\n  // is loading. The \'queryKey\' is the index of the cache (add variables in the\n  // list to update the query when some variables change).\n  const eventsQuery = useQuery<Page<Event>, AxiosError>({\n    queryKey: ["events"],\n    queryFn: async () => {\n      const res = await axios.get<PageDTO<EventDTO>>("/api/event/event/");\n      return adaptPage(res.data, adaptEvent)\n    },\n  });\n\n  // check if the query is not loading yet\n  if (eventsQuery.isIdle) {\n    return <p>Request not started... \u23f3</p>;\n  }\n\n  // check if the query is loading\n  if (eventsQuery.isLoading) {\n    return <p>Loading... \u23f3</p>;\n  }\n\n  // check if there is an error and show it\n  if (eventsQuery.isError) {\n    return <p>Error: {eventsQuery.error.message}</p>;\n  }\n\n  // if everything is ok, show the data. The types here are:\n  // eventsQuery: a query object\n  // eventsQuery.data: a Page object of events\n  // eventsQuery.data.results: the list of events (Event[])\n  const page = eventsQuery.data;\n  const totalNumberOfEvents = page.count;\n  const eventsOfThisPage = page.results;\n\n  return (\n    <p>Showing {eventsOfThisPage.length} / {totalNumberOfEvents} events</p>\n    <ul>\n      {eventsOfThisPage.map((event) => (\n        <li>{event.title}</li>\n      ))}\n    </ul>\n  );\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Some explanations on this code:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"First, we declare the imports and interfaces."}),"\n",(0,i.jsxs)(t.li,{children:["Then we call our API with ",(0,i.jsx)(t.code,{children:"axios"}),". We obtain a list like this:","\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"[ { title: 'Title 1', begin_date: '2022-01-01T16:54:000Z', ...}, ...]\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["To respect javascript conventions, we change the format of the keys\nand convert dates from string to Date objects with the ",(0,i.jsx)(t.code,{children:"convertFromPythonData"}),"\nfunction:","\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"[ { title: 'Title 1', startDate: Date('2022-01-01T16:54:000Z'), ...}, ...]\n"})}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:"We check for errors."}),"\n",(0,i.jsx)(t.li,{children:"And finally we render the data."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var i=n(7294);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);