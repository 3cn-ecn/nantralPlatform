"use strict";(self.webpackChunknantralplatform_docs=self.webpackChunknantralplatform_docs||[]).push([[29],{9444:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=t(4848),r=t(8453);const s={title:"Use the API",sidebar_position:2,description:"How to share data between the front and the back end"},i="Use the API (i.e. the back end)",o={id:"dev/frontend/use-api",title:"Use the API",description:"How to share data between the front and the back end",source:"@site/docs/dev/frontend/use-api.mdx",sourceDirName:"dev/frontend",slug:"/dev/frontend/use-api",permalink:"/dev/frontend/use-api",draft:!1,unlisted:!1,editUrl:"https://github.com/3cn-ecn/nantralPlatform/tree/master/docs/docs/dev/frontend/use-api.mdx",tags:[],version:"current",lastUpdatedBy:"Alexis Delage",lastUpdatedAt:1712699007e3,sidebarPosition:2,frontMatter:{title:"Use the API",sidebar_position:2,description:"How to share data between the front and the back end"},sidebar:"sidebar",previous:{title:"Architecture",permalink:"/dev/frontend/architecture/"},next:{title:"Styling",permalink:"/dev/frontend/styling"}},d={},c=[{value:"What&#39;s the API?",id:"whats-the-api",level:2},{value:"How to use an API endpoint",id:"how-to-use-an-api-endpoint",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"use-the-api-ie-the-back-end",children:"Use the API (i.e. the back end)"})}),"\n",(0,a.jsx)(n.h2,{id:"whats-the-api",children:"What's the API?"}),"\n",(0,a.jsxs)(n.p,{children:["The Nantral Platform API is built with Django. See ",(0,a.jsx)(n.a,{href:"/dev/backend/create-an-app/",children:"Create an API app"}),"\nfor more details on its structure and how it is organized."]}),"\n",(0,a.jsx)(n.h2,{id:"how-to-use-an-api-endpoint",children:"How to use an API endpoint"}),"\n",(0,a.jsxs)(n.p,{children:["Now, let's see how to use our new API endpoint in a React component.\nThis is a summary of all the steps needed: in practice, we would split\nthe code in different files (see ",(0,a.jsx)(n.a,{href:"/dev/frontend/architecture/",children:"Architecture"}),")."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",metastring:'title="MyComponent.tsx"',children:'import { useState, useEffect } from "react";\nimport { useQuery } from "react-query";\nimport axios, { AxiosError } from "axios";\n\nimport { adaptEvent } from "#modules/event/infra";\nimport { Page, PageDTO, adaptPage } from \'#shared/infra/pagination\';\n\ninterface EventDTO {\n  title: string;\n  start_date: string;\n  end_date: string;\n  is_participating: boolean;\n}\n\ninterface Event {\n  title: string;\n  startDate: Date;\n  endDate: Date;\n  isParticipating: boolean;\n}\n\nfunction MyComponent() {\n  // Create a query object. On the first time, data will be stored in the cache.\n  // Then on next queries, the data of the cache will be used while the query\n  // is loading. The \'queryKey\' is the index of the cache (add variables in the\n  // list to update the query when some variables change).\n  const eventsQuery = useQuery<Page<Event>, AxiosError>({\n    queryKey: ["events"],\n    queryFn: async () => {\n      const res = await axios.get<PageDTO<EventDTO>>("/api/event/event/");\n      return adaptPage(res.data, adaptEvent)\n    },\n  });\n\n  // check if the query is not loading yet\n  if (eventsQuery.isIdle) {\n    return <p>Request not started... \u23f3</p>;\n  }\n\n  // check if the query is loading\n  if (eventsQuery.isLoading) {\n    return <p>Loading... \u23f3</p>;\n  }\n\n  // check if there is an error and show it\n  if (eventsQuery.isError) {\n    return <p>Error: {eventsQuery.error.message}</p>;\n  }\n\n  // if everything is ok, show the data. The types here are:\n  // eventsQuery: a query object\n  // eventsQuery.data: a Page object of events\n  // eventsQuery.data.results: the list of events (Event[])\n  const page = eventsQuery.data;\n  const totalNumberOfEvents = page.count;\n  const eventsOfThisPage = page.results;\n\n  return (\n    <p>Showing {eventsOfThisPage.length} / {totalNumberOfEvents} events</p>\n    <ul>\n      {eventsOfThisPage.map((event) => (\n        <li>{event.title}</li>\n      ))}\n    </ul>\n  );\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Some explanations on this code:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"First, we declare the imports and interfaces."}),"\n",(0,a.jsxs)(n.li,{children:["Then we call our API with ",(0,a.jsx)(n.code,{children:"axios"}),". We obtain a list like this:","\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"[ { title: 'Title 1', begin_date: '2022-01-01T16:54:000Z', ...}, ...]\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["To respect javascript conventions, we change the format of the keys\nand convert dates from string to Date objects with the ",(0,a.jsx)(n.code,{children:"convertFromPythonData"}),"\nfunction:","\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"[ { title: 'Title 1', startDate: Date('2022-01-01T16:54:000Z'), ...}, ...]\n"})}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"We check for errors."}),"\n",(0,a.jsx)(n.li,{children:"And finally we render the data."}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);