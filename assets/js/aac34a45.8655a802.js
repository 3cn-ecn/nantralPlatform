"use strict";(self.webpackChunknantralplatform_docs=self.webpackChunknantralplatform_docs||[]).push([[6019],{3525:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var n=s(4848),r=s(8453);const a={sidebar_position:3},i="Integration Tests",o={id:"dev/backend/testing/integration-tests",title:"Integration Tests",description:"Integration tests allows us to test the features of the code.",source:"@site/docs/dev/backend/testing/integration-tests.mdx",sourceDirName:"dev/backend/testing",slug:"/dev/backend/testing/integration-tests",permalink:"/dev/backend/testing/integration-tests",draft:!1,unlisted:!1,editUrl:"https://github.com/3cn-ecn/nantralPlatform/tree/master/docs/docs/dev/backend/testing/integration-tests.mdx",tags:[],version:"current",lastUpdatedBy:"Alexis Delage",lastUpdatedAt:1712699007e3,sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar",previous:{title:"Linter and Formatter",permalink:"/dev/backend/testing/linting"},next:{title:"Send Emails",permalink:"/dev/backend/emails"}},d={},l=[{value:"Philosophy",id:"philosophy",level:2},{value:"Write a test",id:"write-a-test",level:2},{value:"Run the tests",id:"run-the-tests",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"integration-tests",children:"Integration Tests"})}),"\n",(0,n.jsx)(t.p,{children:"Integration tests allows us to test the features of the code."}),"\n",(0,n.jsx)(t.p,{children:"This is an important thing to do, to avoid regressions (if we add a new feature,\nwe want to be sure we're not breaking another feature)."}),"\n",(0,n.jsxs)(t.admonition,{type:"info",children:[(0,n.jsxs)(t.mdxAdmonitionTitle,{children:["Why ",(0,n.jsx)(t.em,{children:"Integration"})," tests?"]}),(0,n.jsx)(t.p,{children:"There are different types of tests:"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Unit tests"})," are tests that test a single function or a single class."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Integration tests"})," are tests that test the interaction between different parts of the code."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"End-to-end tests"})," are tests that test the whole application, from the front end to the back end."]}),"\n"]}),(0,n.jsx)(t.p,{children:"On Nantral Platform, we choose to focus on integration tests, because they\nare easy to implement and allow us to quickly find potential bugs or security\nissues."})]}),"\n",(0,n.jsx)(t.h2,{id:"philosophy",children:"Philosophy"}),"\n",(0,n.jsx)(t.p,{children:"A good integration test is a test that reproduces the user experience.\nIt should, for a given API route:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"test the result (correctness)"}),"\n",(0,n.jsx)(t.li,{children:"test the permissions (security)"}),"\n",(0,n.jsx)(t.li,{children:"test the error handling (robustness)"}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"write-a-test",children:"Write a test"}),"\n",(0,n.jsxs)(t.p,{children:["To add a test for a route, create a ",(0,n.jsx)(t.code,{children:"tests.py"})," file in the app you want to test."]}),"\n",(0,n.jsxs)(t.p,{children:["Here is an example of a test file, which test the example of the\n",(0,n.jsx)(t.a,{href:"/dev/backend/create-an-app/",children:"Create an API app pages"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",metastring:'title="apps/event/tests.py"',children:'from rest_framework import status, test\n\nfrom .models import Event\n\nclass RetrieveEventTestCase(test.APITestCase):\n    # Set up database objects for the whole TestCase\n    @classmethod\n    def setUpTestData(cls):\n        cls.event = Event.objects.create(\n            name="My event",\n            start_date="2022-01-01",\n            end_date="2022-01-02",\n        )\n        cls.user = User.objects.create_user(email="test@example.com")\n        cls.admin = User.objects.create_super_user(email="admin@example.com")\n\n    # the test method must begin with "test_"\n    def test_get_event_not_authenticated(self):\n        response = self.client.get(f"/api/event/{self.event.id}/")\n        # check response is forbidden\n        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)\n\n    # another test method\n    def test_get_event_authenticated(self):\n        # use force_authenticate to bypass validation (email, temporary accounts)\n        self.client.force_authenticate(self.user)\n        response = self.client.get(f"/api/event/{self.event.id}/")\n        # check response if authorized\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        # check the content is OK and name has not been modified\n        self.assertEqual(response.data["name"], "My event")\n'})}),"\n",(0,n.jsx)(t.admonition,{title:"Good practices",type:"tip",children:(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"You should write 1 class per route"}),"\n",(0,n.jsxs)(t.li,{children:["If you have too many tests in an app, you can split your tests in multiple\nfiles placed in a ",(0,n.jsx)(t.code,{children:"tests"})," folder and rename each file ",(0,n.jsx)(t.code,{children:"test_<name>.py"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["Use the correct ",(0,n.jsx)(t.code,{children:"assert*"})," method depending of your case."]}),"\n"]})}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsxs)("summary",{children:["List of ",(0,n.jsx)(t.code,{children:"assert*"})," methods"]}),(0,n.jsx)(t.p,{children:"The most commonly used:"}),(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Method"}),(0,n.jsx)(t.th,{children:"Checks that"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["assertEqual(a, b) ",(0,n.jsx)("br",{})," assertNotEqual(a, b)"]}),(0,n.jsxs)(t.td,{children:["a == b ",(0,n.jsx)("br",{})," a != b"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["assertTrue(x) ",(0,n.jsx)("br",{})," assertFalse(x)"]}),(0,n.jsxs)(t.td,{children:["bool(x) is True ",(0,n.jsx)("br",{})," bool(x) is False"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["assertIsNone(x) ",(0,n.jsx)("br",{})," assertIsNotNone(x)"]}),(0,n.jsxs)(t.td,{children:["x is None ",(0,n.jsx)("br",{})," x is not None"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["assertIn(a, b) ",(0,n.jsx)("br",{})," assertNotIn(a, b)"]}),(0,n.jsxs)(t.td,{children:["a in b ",(0,n.jsx)("br",{})," a not in b"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["assertAlmostEqual(a, b) ",(0,n.jsx)("br",{})," assertNotAlmostEqual(a, b)"]}),(0,n.jsxs)(t.td,{children:["round(a-b, 7) == 0 ",(0,n.jsx)("br",{})," round(a-b, 7) != 0"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["assertGreater(a, b) ",(0,n.jsx)("br",{})," assertLess(a, b)"]}),(0,n.jsxs)(t.td,{children:["a > b ",(0,n.jsx)("br",{})," a < b"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["assertGreaterEqual(a, b) ",(0,n.jsx)("br",{})," assertLessEqual(a, b)"]}),(0,n.jsxs)(t.td,{children:["a >= b ",(0,n.jsx)("br",{})," a <= b"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["assertRegex(s, r) ",(0,n.jsx)("br",{})," assertNotRegex(s, r)"]}),(0,n.jsxs)(t.td,{children:["r.search(s) ",(0,n.jsx)("br",{})," not r.search(s)"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"assertCountEqual(a, b)"}),(0,n.jsx)(t.td,{children:"a and b have the same elements in the same number, regardless of their order."})]})]})]}),(0,n.jsxs)(t.p,{children:["Check out the ",(0,n.jsxs)(t.a,{href:"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual",children:["list of ",(0,n.jsx)(t.code,{children:"assert*"})," methods in Python"]}),"\nand the ",(0,n.jsxs)(t.a,{href:"https://docs.djangoproject.com/fr/4.2/topics/testing/tools/#assertions",children:["list of ",(0,n.jsx)(t.code,{children:"assert*"})," methods specific to Django"]}),"."]})]}),"\n",(0,n.jsx)(t.h2,{id:"run-the-tests",children:"Run the tests"}),"\n",(0,n.jsx)(t.p,{children:"You can run the tests of a specific app with this command:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"pipenv run test apps.event\n"})}),"\n",(0,n.jsx)(t.p,{children:"You can also run the tests for all apps at once:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"pipenv run test\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var n=s(6540);const r={},a=n.createContext(r);function i(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);