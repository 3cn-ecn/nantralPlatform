"use strict";(self.webpackChunknantralplatform_docs=self.webpackChunknantralplatform_docs||[]).push([[6603],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(a),h=r,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||o;return a?n.createElement(m,i(i({ref:t},c),{},{components:a})):n.createElement(m,i({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},2775:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:2,last_update:{date:"2024-01-30 12:11:39 -0500",author:"Corentin09"}},i="Daily workflow",l={unversionedId:"dev/guides/git/daily-workflow",id:"dev/guides/git/daily-workflow",title:"Daily workflow",description:"Here is a typical workflow for contributing on the project with Git.",source:"@site/docs/dev/guides/git/daily-workflow.md",sourceDirName:"dev/guides/git",slug:"/dev/guides/git/daily-workflow",permalink:"/dev/guides/git/daily-workflow",draft:!1,editUrl:"https://github.com/3cn-ecn/nantralPlatform/tree/master/docs/docs/dev/guides/git/daily-workflow.md",tags:[],version:"current",lastUpdatedBy:"Corentin09",lastUpdatedAt:1706634699,formattedLastUpdatedAt:"Jan 30, 2024",sidebarPosition:2,frontMatter:{sidebar_position:2,last_update:{date:"2024-01-30 12:11:39 -0500",author:"Corentin09"}},sidebar:"sidebar",previous:{title:"Tutorial for GitHub Desktop",permalink:"/dev/guides/git/tutorial"},next:{title:"Frameworks",permalink:"/dev/guides/frameworks/"}},s={},u=[{value:"1. Create a ticket",id:"1-create-a-ticket",level:2},{value:"2. Create a new branch",id:"2-create-a-new-branch",level:2},{value:"3. Code",id:"3-code",level:2},{value:"4. Create a pull request",id:"4-create-a-pull-request",level:2},{value:"5. Merge your PR!",id:"5-merge-your-pr",level:2},{value:"\ud83d\udedf F.A.Q.",id:"-faq",level:2},{value:"Should I use <em>merge</em> or <em>squash</em> to validate my Pull Request?",id:"should-i-use-merge-or-squash-to-validate-my-pull-request",level:3},{value:"Someone has push new commits on the master branch, how to update my branch?",id:"someone-has-push-new-commits-on-the-master-branch-how-to-update-my-branch",level:3}],c={toc:u},d="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"daily-workflow"},"Daily workflow"),(0,r.kt)("p",null,"Here is a typical workflow for contributing on the project with Git."),(0,r.kt)("h2",{id:"1-create-a-ticket"},"1. Create a ticket"),(0,r.kt)("p",null,"Before beginning to code, you must decide ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"what"))," you will code: for this,\ncreate a new ticket on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/3cn-ecn/nantralPlatform/issues"},"GitHub repository"),"."),(0,r.kt)("p",null,"Your ticket should describe:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"what you will change,"),(0,r.kt)("li",{parentName:"ul"},"which criteria someone can check to validate your ticket when you will have finished to code,"),(0,r.kt)("li",{parentName:"ul"},"a design or mock-up of the interfaces you will create (you can use for example ",(0,r.kt)("a",{parentName:"li",href:"https://excalidraw.com/"},"Excalidraw"),"),"),(0,r.kt)("li",{parentName:"ul"},"the changes you will make on the database,"),(0,r.kt)("li",{parentName:"ul"},"the different steps you will follow to code.")),(0,r.kt)("h2",{id:"2-create-a-new-branch"},"2. Create a new branch"),(0,r.kt)("p",null,"Then, you can create a branch a new branch from the issue:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(805).Z,width:"1788",height:"1462"})),(0,r.kt)("p",null,"and then switch to this new branch in VS code (or use GitHub Desktop):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout <my-new-branch>\n")),(0,r.kt)("h2",{id:"3-code"},"3. Code"),(0,r.kt)("p",null,"Time to code! This part is up to you now ^^"),(0,r.kt)("p",null,"Do not forget to make multiple commits during your work: a commit should be\na small step during your work, and help you to go back if you make a mistake.\nThey also can help another developer to review your code later, so be sure to\nname them explicitly!"),(0,r.kt)("h2",{id:"4-create-a-pull-request"},"4. Create a pull request"),(0,r.kt)("p",null,"When you have finished to code, you can create a pull request on GitHub: simply\ngo to the ",(0,r.kt)("em",{parentName:"p"},"Pull Request")," tab, and create a new one from your branch to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"master")," branch."),(0,r.kt)("p",null,"Describe your changes in the pull request, and read all your code a second\ntime: this will help you to catch frequent bugs. Wait for the tests to pass:\nif a test fails, check which test has failed and try to understand why."),(0,r.kt)("h2",{id:"5-merge-your-pr"},"5. Merge your PR!"),(0,r.kt)("p",null,"If everything is ok, ask someone to review your code. It is always better\nfor the code to be reviewed twice: one time by the author (you!), and the\nsecond time by someone else."),(0,r.kt)("p",null,"Then, once your PR is approved, you can merge it! Congratulations, you have\ncontributed to Nantral Platform! \ud83e\udd73"),(0,r.kt)("h2",{id:"-faq"},"\ud83d\udedf F.A.Q."),(0,r.kt)("h3",{id:"should-i-use-merge-or-squash-to-validate-my-pull-request"},"Should I use ",(0,r.kt)("em",{parentName:"h3"},"merge")," or ",(0,r.kt)("em",{parentName:"h3"},"squash")," to validate my Pull Request?"),(0,r.kt)("p",null,"You can use either you want, but consider this:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"squash")," is better because it will keep the history clean, and will avoid\nto have a lot of commits in the history. However, you can't add new commits\non your branch when the commits are squashed, so you have to immediately\ndelete your branch and create a new one if you see some bugs in production."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"merge")," is more sure, but it keeps all the commits in the history and it\ncan be a mess later.")),(0,r.kt)("h3",{id:"someone-has-push-new-commits-on-the-master-branch-how-to-update-my-branch"},"Someone has push new commits on the master branch, how to update my branch?"),(0,r.kt)("p",null,"To update your branch, you need to do a ",(0,r.kt)("strong",{parentName:"p"},"rebase"),".\nIn your terminal, type the following to rebase your branch on the ",(0,r.kt)("inlineCode",{parentName:"p"},"master")," branch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git fetch\ngit rebase origin/master\n")),(0,r.kt)("p",null,"Then, look into the ",(0,r.kt)("em",{parentName:"p"},"Git Panel")," of VS code: if they are conflicts, it will show\nthem to you. You can then fix them, and then validate them by clicking\n",(0,r.kt)("em",{parentName:"p"},"Continue"),". Repeat these steps again for each commit where there are conflicts,\nuntil VS code does not show anymore the ",(0,r.kt)("em",{parentName:"p"},"Continue")," button."),(0,r.kt)("p",null,"In the VS code files, ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Current change"))," represents the code\nfrom the branch ",(0,r.kt)("inlineCode",{parentName:"p"},"master"),", and ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Incoming change"))," represents the code from your\nbranch."),(0,r.kt)("admonition",{title:"Warning",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If you have already pushed your branch on GitHub, the ",(0,r.kt)("inlineCode",{parentName:"p"},"git push")," command\nwill not work after a rebase. You need to make a ",(0,r.kt)("strong",{parentName:"p"},"forced push")," to update your\nbranch on GitHub: ",(0,r.kt)("inlineCode",{parentName:"p"},"git push -f"),".")))}p.isMDXComponent=!0},805:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/create-branch-9c5d7dd5a5ada186966344c599e7c021.gif"}}]);