version: "2.1"

services:
  database:
    image: postgres:11.5
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD

  server:
    build:
      context: ../
      dockerfile: deployment/containers/web/Dockerfile
    expose:
      - 8000
    command: sh run_server.sh
    volumes:
      - ../server:/var/app
      - static_volume:/var/app/staticfiles/
    depends_on:
      - database
      - redis
    environment:
      - DB_HOSTNAME
      - DB_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - DB_NAME
      - S3_BUCKET
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - GITHUB_USER
      - GITHUB_TOKEN
      - DJANGO_ALLOWED_HOSTS
      - SECRET_KEY
      - MAPBOX_API_KEY
      - DISCORD_TOKEN
      - DISCORD_CHANNEL_ID
      - DISCORD_ADMIN_MODERATION_WEBHOOK
      - TEMPORARY_ACCOUNTS_DATE_LIMIT

  server-staging:
    build:
      context: ../../nantralPlatform-staging
      dockerfile: deployment/containers/web_staging/Dockerfile
    env_file: ../../nantralPlatform-staging/deployment/.env
    expose:
      - 8001
    command: sh run_server_staging.sh
    volumes:
      - ../../nantralPlatform-staging/server:/var/app
      - static_volume:/var/app/staticfiles/
    depends_on:
      - database
      - redis
    environment:
      - DB_HOSTNAME
      - DB_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - DB_NAME
      - DB_NAME_PROD
      - S3_BUCKET
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - GITHUB_USER
      - GITHUB_TOKEN
      - DJANGO_ALLOWED_HOSTS
      - SECRET_KEY
      - MAPBOX_API_KEY
      - DISCORD_TOKEN
      - DISCORD_CHANNEL_ID
      - DISCORD_ADMIN_MODERATION_WEBHOOK
      - TEMPORARY_ACCOUNTS_DATE_LIMIT

  nginx:
    build: ./containers/nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ../server:/var/app
      - static_volume:/var/app/staticfiles/
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - server

  # External dependencies
  redis:
    image: redis:alpine
    restart: always
    volumes:
      - "./redis:/data"

  celery:
    build:
      context: ../
      dockerfile: deployment/containers/web/Dockerfile
    command: celery -A apps.celery worker -l info
    volumes:
      - ../server:/var/app
    depends_on:
      - celery-beat
      - redis
    environment:
      - DB_HOSTNAME
      - DB_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - DB_NAME
      - S3_BUCKET
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - DJANGO_SETTINGS_MODULE=config.settings.docker
      - GITHUB_USER
      - GITHUB_TOKEN
      - MAPBOX_API_KEY
      - DISCORD_TOKEN
      - DISCORD_CHANNEL_ID
      - TEMPORARY_ACCOUNTS_DATE_LIMIT

  celery-beat:
    build:
      context: ../
      dockerfile: deployment/containers/web/Dockerfile
    command: celery -A apps.celery beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ../server:/var/app
    depends_on:
      - redis
    environment:
      - DB_HOSTNAME
      - DB_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - DB_NAME
      - S3_BUCKET
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - DJANGO_SETTINGS_MODULE=config.settings.docker
      - GITHUB_USER
      - GITHUB_TOKEN
      - MAPBOX_API_KEY
      - DISCORD_TOKEN
      - DISCORD_CHANNEL_ID
      - TEMPORARY_ACCOUNTS_DATE_LIMIT

  # Core services
  front:
    image: ${DOCKER_ORG:-mailu}/${DOCKER_PREFIX:-}nginx:${MAILU_VERSION:-1.8}
    restart: always
    env_file: mailu.env
    logging:
      driver: json-file
    ports:
      - "127.0.0.1:8080:80"
      - "127.0.0.1:8443:443"
      - "0.0.0.0:25:25"
      - 465:465
      - 587:587
      - 110:110
      - 995:995
      - 143:143
      - 993:993
    volumes:
      - "./certs:/certs"
      - "./overrides/nginx:/overrides:ro"

  resolver:
    image: ${DOCKER_ORG:-mailu}/${DOCKER_PREFIX:-}unbound:${MAILU_VERSION:-1.8}
    env_file: mailu.env
    restart: always
    networks:
      default:
        ipv4_address: 192.168.203.254

  admin:
    image: ${DOCKER_ORG:-mailu}/${DOCKER_PREFIX:-}admin:${MAILU_VERSION:-1.8}
    restart: always
    env_file: mailu.env
    volumes:
      - "./data:/data"
      - "./dkim:/dkim"
    depends_on:
      - redis

  imap:
    image: ${DOCKER_ORG:-mailu}/${DOCKER_PREFIX:-}dovecot:${MAILU_VERSION:-1.8}
    restart: always
    env_file: mailu.env
    volumes:
      - "./mail:/mail"
      - "./overrides/dovecot:/overrides:ro"
    depends_on:
      - front

  smtp:
    image: ${DOCKER_ORG:-mailu}/${DOCKER_PREFIX:-}postfix:${MAILU_VERSION:-1.8}
    restart: always
    env_file: mailu.env
    volumes:
      - "./mailqueue:/queue"
      - "./overrides/postfix:/overrides:ro"
    depends_on:
      - front
      - resolver
    dns:
      - 192.168.203.254

  antispam:
    image: ${DOCKER_ORG:-mailu}/${DOCKER_PREFIX:-}rspamd:${MAILU_VERSION:-1.8}
    hostname: antispam
    restart: always
    env_file: mailu.env
    volumes:
      - "./filter:/var/lib/rspamd"
      - "./dkim:/dkim:ro"
      - "./overrides/rspamd:/etc/rspamd/override.d:ro"
    depends_on:
      - front
      - resolver
    dns:
      - 192.168.203.254

  # Optional services

  #webdav:
  #  image: ${DOCKER_ORG:-mailu}/${DOCKER_PREFIX:-}radicale:${MAILU_VERSION:-1.8}
  #  restart: always
  #  env_file: mailu.env
  #  volumes:
  #    - "./dav:/data"

  fetchmail:
    image: ${DOCKER_ORG:-mailu}/${DOCKER_PREFIX:-}fetchmail:${MAILU_VERSION:-1.8}
    restart: always
    env_file: mailu.env
    depends_on:
      - resolver
    dns:
      - 192.168.203.254

  # Webmail
  webmail:
    image: ${DOCKER_ORG:-mailu}/${DOCKER_PREFIX:-}roundcube:${MAILU_VERSION:-1.8}
    restart: always
    env_file: mailu.env
    volumes:
      - "./webmail:/data"
    depends_on:
      - imap

  wiki:
    image: requarks/wiki:2
    depends_on:
      - database
    env_file: wiki.env
    restart: unless-stopped
    ports:
      - "127.0.0.1:8081:3000"
      - "127.0.0.1:8444:3443"

volumes:
  postgres_data:
  static_volume:

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.203.0/24
